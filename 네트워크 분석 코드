{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# 패키지"
      ],
      "metadata": {
        "id": "pGrYRL-aBs1C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!sudo apt-get install -y fonts-nanum\n",
        "!sudo fc-cache -fv\n",
        "!rm ~/.cache/matplotlib -rf\n",
        "!pip install konlpy\n",
        "!pip install koreanize-matplotlib\n",
        "!pip install apyori\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import koreanize_matplotlib\n",
        "from konlpy.tag import Okt\n",
        "from tqdm import tqdm\n",
        "from apyori import apriori\n",
        "import networkx as nx\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "CpcN_Dv5BskE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rc('font',family='NanumBarunGothic')"
      ],
      "metadata": {
        "id": "VtV2RturBy5D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('편의점 우산_카페.csv')\n",
        "df"
      ],
      "metadata": {
        "id": "QNtYe5-zB1YT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "comment_df = df['comments']\n",
        "print(comment_df)\n",
        "content_df = df['content']\n",
        "print(content_df)"
      ],
      "metadata": {
        "id": "gfwka5WbCG6L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "okt = Okt()\n",
        "\n",
        "total_list = []\n",
        "for temp in tqdm(comment_df):\n",
        "    words = okt.nouns(temp)\n",
        "    w_list = []\n",
        "    for word in words:\n",
        "        if len(word) > 1:\n",
        "            w_list.append(word)\n",
        "\n",
        "    reply_list.append(w_list)\n",
        "\n",
        "for temp in tqdm(content_df):\n",
        "    words = okt.nouns(temp)\n",
        "    w_list = []\n",
        "    for word in words:\n",
        "        if len(word) > 1:\n",
        "            w_list.append(word)\n",
        "\n",
        "    reply_list.append(w_list)\n",
        "\n",
        "total_list"
      ],
      "metadata": {
        "id": "PbhVge3oCeh4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "result = list(apriori(reply_list,min_support=0.03))\n",
        "print(result)\n",
        "\n",
        "df = pd.DataFrame(result)\n",
        "print(df)"
      ],
      "metadata": {
        "id": "exvKKvmXCjaS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1vDCz_tnBols"
      },
      "outputs": [],
      "source": [
        "item_len = []\n",
        "for temp in df['items']:\n",
        "    item_len.append(len(temp))\n",
        "\n",
        "df['length'] = item_len\n",
        "\n",
        "df = df[(df['length'] == 2) & (df['support'] > 0.05)]\n",
        "df\n",
        "\n",
        "plt.rc('font',family='NanumBarunGothic')\n",
        "\n",
        "G = nx.Graph()\n",
        "ar = (df['items'])\n",
        "G.add_edges_from(ar)\n",
        "\n",
        "pr = nx.pagerank(G)\n",
        "nsize = np.array([temp for temp in pr.values()])\n",
        "nsize = 2000 * (nsize-min(nsize))/max(nsize) - min(nsize)\n",
        "\n",
        "pos = nx.kamada_kawai_layout(G)\n",
        "\n",
        "nx.draw(G,pos, node_size = nsize, with_labels=True, font_family='NanumBarunGothic')\n",
        "plt.show()"
      ]
    }
  ]
}
